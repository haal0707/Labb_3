#Lab_4 ML
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize as op
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
#from sklearn import predic_proba_

DJ_data = pd.read_csv("C:\\Users\\Johan\\Downloads\\DowJones_daily_96_23.csv", delimiter = ",")
ewma_20 = DJ_data.loc[:,'AAPL':'XOM'].ewm(span = 20).mean()
ewma_60 = DJ_data.loc[:,'AAPL':'XOM'].ewm(span = 60).mean()
ret_mat = DJ_data.iloc[1002:,1:].to_numpy(float)

#Log returns:
DJ_data_log = np.log(1 + DJ_data.iloc[:,1:])

#Decicion making for all the strategies
#Market following strategy
mf_s = DJ_data.iloc[1002:,1:].mean(axis = 1)

#Momentum following strategy
mom_s_dec_mat = np.sign(ewma_20.iloc[1002:,:]) #correct or move one period back?
mom_ret_mat = DJ_data.iloc[1002:,1:].to_numpy(float)
mom_s_dec_mat[mom_s_dec_mat == 0] = 1
mom_s = np.mean(mom_ret_mat * mom_s_dec_mat, axis = 1)#need log returns?
mom_unmeaned = mom_ret_mat * mom_s_dec_mat

#percistancy
pe_s_dec_mat = np.sign(DJ_data.iloc[1001:,1:].shift(1).dropna())
pe_ret_mat = DJ_data.iloc[1002:,1:].to_numpy(float)
pe_s_dec_mat[pe_s_dec_mat == 0] = 1
#pe_ret_mat[pe_s_dec_mat == -1] = pe_ret_mat
#pe_s = pe_s_dec_mat * pe_ret_mat
pe_s = np.mean(pe_ret_mat * pe_s_dec_mat, axis = 1)
pe_unmeaned = pe_ret_mat * pe_s_dec_mat

#loop and calculate returns
mf_s_evo = np.zeros((len(mf_s)+1))
mom_s_evo = np.zeros((len(mf_s)+1))
pe_s_evo = np.zeros((len(mf_s)+1))
mf_s_evo[0] = mom_s_evo[0] = pe_s_evo[0] = 0
for i in range(len(mf_s)):
    mf_s_evo[i + 1] = mf_s_evo[i] + mf_s.iloc[i]
    mom_s_evo[i + 1] = mom_s_evo[i] + mom_s.iloc[i]
    pe_s_evo[i + 1] = pe_s_evo[i] + pe_s.iloc[i]

#1a) plot of strategy evolutions
plt.plot(mf_s_evo)
plt.plot(mom_s_evo)
plt.plot(pe_s_evo)

#1b) 250th day table
evo_df = pd.DataFrame([mf_s_evo,mom_s_evo,pe_s_evo])
evo_df.iloc[:,::250]

#1c) key figures table
strategies1 = ["Market following","Momentum strategy","Percistance strategy"]
diff_df = pd.DataFrame(list(zip(mf_s,mom_s,pe_s)), columns = strategies1)
key_figs = ["Annulized mean","Volatility","Sharpe ratio","Win percentage", "Average precision"]
key_fig_table = pd.DataFrame(np.zeros((len(key_figs),len(strategies1))), columns = strategies1, index = key_figs)
for strat in strategies1:
    key_fig_table.loc[key_figs[0]][strat] = diff_df[strat].mean()*252
    key_fig_table.loc[key_figs[1]][strat] = diff_df[strat].std() * np.sqrt(252)
    key_fig_table.loc[key_figs[2]][strat] = (diff_df[strat].mean() * 252) / (diff_df[strat].std() * np.sqrt(252))
    key_fig_table.loc[key_figs[3]][strat] = diff_df[diff_df[strat] >= 0][strat].count() / len(diff_df[strat])

key_fig_table.loc[key_figs[4]][strategies1[0]] = np.sum(DJ_data.iloc[1002:,1:][DJ_data.iloc[1002:,1:] >= 0].count()) / np.sum(DJ_data.iloc[1002:,1:].count())
key_fig_table.loc[key_figs[4]][strategies1[1]] = np.sum(mom_unmeaned[mom_unmeaned >= 0].count()) / np.sum(mom_unmeaned.count())
key_fig_table.loc[key_figs[4]][strategies1[2]] = np.sum(pe_unmeaned[pe_unmeaned >= 0].count()) / np.sum(pe_unmeaned.count())

#2a
#Linear regression algorithm, Decision tree classifiers, probably wrong, have to do it stockwise with all the information!
pred_size = len(DJ_data.iloc[1002:,1:])
LR_dec_mat = np.zeros((pred_size,len(DJ_data.columns)-1))
DT_dec_mat_2 = np.zeros((pred_size,len(DJ_data.columns)-1))
DT_dec_mat_3 = np.zeros((pred_size,len(DJ_data.columns)-1))
for day in np.arange(0,pred_size,250):
    X1 = ewma_20.iloc[day+1:day+1001,:]  # Feature 1 (24)
    X2 = ewma_60.iloc[day+1:day+1001,:]  # Feature 2 (24)
    i_stock = 0
    for stock in ewma_20.columns:
        Y = DJ_data.iloc[day+1:day+1001][stock]  # Make loop here for each stock as training variable
        Y2 = np.sign(DJ_data.iloc[day+1:day+1001][stock])  # Target with sign

        #Create the linear regression model
        model = LinearRegression()
        model2 = DecisionTreeClassifier(max_depth=2)
        model3 = DecisionTreeClassifier(max_depth=3)

        #print(day,stock)
        model.fit(np.hstack((X1, X2)), Y)
        model2.fit(np.hstack((X1, X2)), Y2)
        model3.fit(np.hstack((X1, X2)), Y2)
        #Generate predictions
        for i in range(250):
            if day+i < len(DJ_data.iloc[1002:,1:]):
                predictions = model.predict(np.hstack((ewma_20.iloc[day+1002+i:day+1003+i,:], ewma_60.iloc[day+1002+i:day+1003+i,:])))
                predictions2 = model2.predict(np.hstack((ewma_20.iloc[day+1002+i:day+1003+i,:], ewma_60.iloc[day+1002+i:day+1003+i,:])))
                predictions3 = model3.predict(np.hstack((ewma_20.iloc[day+1002+i:day+1003+i,:], ewma_60.iloc[day+1002+i:day+1003+i,:])))
                LR_dec_mat[day + i,i_stock] = np.where(predictions[0] > 0, 1, -1)
                DT_dec_mat_2[day + i,i_stock] = np.where(predictions2[0] > 0, 1, -1)
                DT_dec_mat_3[day + i,i_stock] = np.where(predictions3[0] > 0, 1, -1)
        i_stock += 1

LR_s = np.mean(ret_mat * LR_dec_mat, axis = 1)
DT_s_2 = np.mean(ret_mat * DT_dec_mat_2, axis = 1)
DT_s_3 = np.mean(ret_mat * DT_dec_mat_3, axis = 1)
LR_s_evo = np.zeros((len(mf_s)+1))
DT_s_2_evo = np.zeros((len(mf_s)+1))
DT_s_3_evo = np.zeros((len(mf_s)+1))
for i in range(len(LR_s)):
    LR_s_evo[i + 1] = LR_s_evo[i] + LR_s[i]
    DT_s_2_evo[i + 1] = DT_s_2_evo[i] + DT_s_2[i]
    DT_s_3_evo[i + 1] = DT_s_3_evo[i] + DT_s_3[i]

plt.plot(LR_s_evo)
plt.plot(DT_s_2_evo)
plt.plot(DT_s_3_evo)


#2b
evo_df = pd.DataFrame([LR_s_evo,DT_s_2_evo,DT_s_3_evo])
evo_df.iloc[:,::250]

#2c
strategies2 = ["Linear regression","Decision tree 2","Decision tree 3"]
diff_df = pd.DataFrame(list(zip(LR_s,DT_s_2,DT_s_3)), columns = strategies2)
key_figs2 = ["Annulized mean","Volatility","Sharpe ratio","Win percentage", "Average precision"]
key_fig_table2 = pd.DataFrame(np.zeros((len(key_figs),len(strategies2))), columns = strategies2, index = key_figs)
for strat in strategies2:
    key_fig_table2.loc[key_figs2[0]][strat] = diff_df[strat].mean()*252
    key_fig_table2.loc[key_figs2[1]][strat] = diff_df[strat].std() * np.sqrt(252)
    key_fig_table2.loc[key_figs2[2]][strat] = (diff_df[strat].mean() * 252) / (diff_df[strat].std() * np.sqrt(252))
    key_fig_table2.loc[key_figs2[3]][strat] = diff_df[diff_df[strat] >= 0][strat].count() / len(diff_df[strat])

LR_unm = ret_mat * LR_dec_mat
DT_s_2_unm = ret_mat * DT_dec_mat_2
DT_s_3_unm = ret_mat * DT_dec_mat_3

key_fig_table2.loc[key_figs2[4]][strategies2[0]] = np.count_nonzero(LR_unm >= 0) / np.size(LR_unm)
key_fig_table2.loc[key_figs2[4]][strategies2[1]] = np.count_nonzero(DT_s_2_unm >= 0) / np.size(DT_s_2_unm)
key_fig_table2.loc[key_figs2[4]][strategies2[2]] = np.count_nonzero(DT_s_3_unm >= 0) / np.size(DT_s_3_unm)

#np.count_nonzero(LR_unm >= 0)

#3a
pred_size = len(DJ_data.iloc[1002:,1:])
RF_dec_mat = np.zeros((pred_size,len(DJ_data.columns)-1))
for day in np.arange(0,pred_size,250):
    X1 = ewma_20.iloc[day+1:day+1001,:]  # Feature 1 (24)
    X2 = ewma_60.iloc[day+1:day+1001,:]  # Feature 2 (24)
    features = [[X1,X2]]
    i_stock = 0
    for stock in ewma_20.columns:
        Y = DJ_data.iloc[day+1:day+1001][stock]  # Make loop here for each stock as training variable
        Y2 = np.sign(DJ_data.iloc[day+1:day+1001][stock])  # Target with sign
        target = Y2

        X_train, y_train = features, target#, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
        rf_classifier = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=42)
        rf_classifier.fit(X_train, y_train)
        for i in range(250):
            if day+i < len(DJ_data.iloc[1002:,1:]):
                #Generate predictions
                #predictions = rf_classifier.predict(X_test) #What is the prediction, one day after as before?
                #accuracy = accuracy_score(y_test, predictions)
                #Think here!
                predictions = rf_classifier.predict(np.hstack((ewma_20.iloc[day+1002+i:day+1003+i,:], ewma_60.iloc[day+1002+i:day+1003+i,:])))
                accuracy = accuracy_score(y_test, predictions)
                RF_dec_mat[day,i_stock] = np.where(predictions[0] > 0, 1, -1)
        i_stock += 1
